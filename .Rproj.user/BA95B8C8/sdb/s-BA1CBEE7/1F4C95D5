{
    "contents" : "#' Convert data frame into a row array JSON + list of column datatypes\n#' \n#' @import RJSONIO \nformatData <- function(data){  \n  \n  #Define data type for each column\n  formatted_data <- list()\n  formatted_data$data.type <-\n    sapply(data, function(x){\n      switch(class(x), \n             'numeric' = 'number', \n             'integer' = 'number',\n             \"character\"=\"string\",\n             \"factor\"=\"string\",\n             \"logical\"=\"boolean\",\n             \"Date\"=\"date\",\n             \"POSIXct\"=\"datetime\",\n             \"POSIXlt\"=\"datetime\")})\n  \n  #Convert data to row array format\n  t_data <- as.data.frame(t(data))\n  formatted_data$json <- toJSON(as.list(t_data), .withNames = F, container = T, pretty = T)\n  #formatted_data$json <- str_replace_all(toJSON(as.list(t_data), .withNames = F, container = T), ' ', '')\n  formatted_data\n}\n\n\n#' Generate a Google Chart object\n#' \n#' @import RJSONIO \n#' @param data data frame to render as a Google chart. The mappings (xvar, yvar, etc.) are determined by column order and chart type.\n#' @param type chart type\n#' @param options chart options\n#' @export\ngoogleChart   <- function(data, type = 'Table', options = list()){\n  formatData      <- formatData(data)\n  #formatted_data  <- googleVis:::gvisFormat(data)\n  dataLabels      <- toJSON(formatted_data$data.type)\n  dataJSON        <- formatted_data$json\n  optionsJSON     <- toJSON(options)\n  return(list(dataLabels = dataLabels, dataJSON = dataJSON, chartType = type, options = optionsJSON))\n}\n\n#' Render A Google Chart\n#'\n#' @param expr an expression that returns a data frame\n#' @param env The environment in which to evaluate \\code{expr}\n#' @param quoted is expr a quoted expression? This is useful if you want to save an expression in a variable.\n#' @export\nrenderGoogleChart <- function(expr, env=parent.frame(), quoted = FALSE){\n  func <- exprToFunction(expr, env, quoted)\n  function(){ \n    val <- func()\n    val\n  }\n}\n\n#' Google Chart output element\n#'\n#' Display a \\link{renderGoogleChart} object within an application page.\n#' @param chartId output variable to read the plot from\n#' @return a plot output element that can be included in a panel\n#' @examples\n#' # Show a Google Line Chart\n#' mainPanel(\n#'   googleChartOutput(\"myLineChart\")\n#' )\n#' @import shiny\n#' @export\ngoogleChartOutput <- function(chartId){\n  addResourcePath(prefix = 'shinyGoogleCharts', directoryPath = system.file('www', package = 'shinyGoogleCharts'))\n  tagList( \n    singleton(HTML('<script type=\"text/javascript\" src=\"//www.google.com/jsapi\"></script>')),\n    singleton(tags$script(src = 'shinyGoogleCharts/googleChart.js')),\n    #singleton(includeScript(paste0(system.file('www', package = 'shinyGoogleCharts'), '/googleChart.js'))),\n    HTML(paste0('<div id = \"', chartId, '\" class=\"shinyGoogleChart\" style = \"width:100%; height:100%; overflow-y: hidden; overflow-x: hidden\"></div>'))\n  )\n}\n\n#' Shiny Chart Editor output element\n#' \n#' Display a Chart Editor button within an application page.  Displays a GUI allowing user to modify properties of the target chart.\n#' @param editorId id of the chart editor, available as an input variable\n#' @param chartId id of the \\link{renderGoogleChart} object modified by the editor\n#' @param type initial type of the target chart.  Defaults to 'Table'\n#' @param options initial options of the target chart\n#' @param label label for the Chart Editor button\n#' @import shiny\n#' @export\ngoogleChartEditor <- function(editorId, chartId, type = 'Table', options = list(), label = 'Edit Chart'){\n  addResourcePath(prefix = 'shinyGoogleCharts', directoryPath = system.file('www', package = 'shinyGoogleCharts'))\n  tagList(\n    singleton(HTML('<script type=\"text/javascript\" src=\"//www.google.com/jsapi\"></script>')),\n    singleton(tags$script(src = 'shinyGoogleCharts/googleChart.js')),\n    \n    #ChartEditor Button  \n    HTML(paste0(\"<div class = 'chartEditor btn' style='display:inline;' onclick='openChartEditor(\\\"\", editorId, \"\\\", \\\"\", chartId, \n                \"\\\");' data-target = '\", chartId, \"' options = '\", toJSON(options),\n                \"' chartType = '\", type,\"' id = '\", editorId,\"'>\", label, \"</div> \")),\n    \n    singleton(tags$script(\n      \"var openChartEditor = function(editorId, chartId){\n      var wrapper = $('#'+chartId).data('chart');\n      var editor = new google.visualization.ChartEditor();\n      google.visualization.events.addListener(editor, 'ok',\n      function() {\n      var new_wrapper = editor.getChartWrapper();\n      new_wrapper.draw($('#'+chartId));\n      $('#'+chartId).data('chart', new_wrapper);\n      $('#'+editorId).attr('chartType', new_wrapper.getChartType());\n      $('#'+editorId).attr('options', JSON.stringify(new_wrapper.getOptions()));\n      $('#'+editorId).trigger('change.chartEditorInputBinding');\n      }\n      );\n      editor.openDialog(wrapper);\n};\"))\n    \n    )}",
    "created" : 1400091179903.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3761911828",
    "id" : "1F4C95D5",
    "lastKnownWriteTime" : 1400086396,
    "path" : "~/Desktop/dev_software/shinyGoogleCharts/R/shinyGoogleCharts.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}