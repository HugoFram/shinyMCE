{
    "contents" : "#---------\n#Libraries\n#---------\nlib         <- c('reshape2',\n                 'stringr',\n                 'lubridate',\n                 'googleVis',\n                 'RJDBC',\n                 'RJSONIO',\n                 'shinyAce',\n                 'shinyGridster')\n\n#Install required libraries\ninstall_libraries(lib = lib)\n\nsource(paste0(getwd(),'/googleChart.R'))\n\n#-----------\n#Static Data\n#-----------\n#Connections to servers\n#MSSQL\nmssqlQuery_fn <- RJDBC::dbGetQuery\nmssql_drv   <- JDBC('com.microsoft.sqlserver.jdbc.SQLServerDriver', str_c(getwd(),'/../../drv/sqljdbc4.jar'), identifier.quote=\"'\"); \nmssql_db    <- dbConnect(mssql_drv, 'jdbc:sqlserver://iheartdw.ihrint.com;databaseName=RadioMart', 'dash_automation', 'dashautomation123')\n\n#Impala\nimpala_drv      <- JDBC(driverClass = 'org.apache.hive.jdbc.HiveDriver', classPath = str_c(getwd(),'/../../drv/impala-jdbc-0.0.1.jar'), \"`\")\nimpala_db       <- dbConnect(impala_drv, 'jdbc:hive2://iad-hadoop102-v200.ihr:21050/;auth=noSasl')\nimpalaQuery_fn  <- RJDBC::dbGetQuery\n\n#Sample SQLite database\nsample_db       <- new.env()\nsample_db$births<- read.csv(\"~/Desktop/dev_software/shiny-dashboards/dashboards/gridster_dash/data/births.csv\")\nsampleQuery_fn  <- function(env, sql){sqldf(sql, envir = env)} \n  \n#HTML templates\nremove_btn      <- HTML('<button type=\"button\" class=\"close deleteme\" aria-hidden=\"true\">x</button>')\nedit_qry_btn    <- tags$div(class=\"btn\", 'data-toggle'=\"modal\", 'data-target'=\"#full-width\", 'Edit Query')\n\n#Misc data\ndefault_qry       <- \"SELECT reported_date, tlh \\nFROM WORKSPACE.dbo.misha_custom_stats \\nWHERE deviceGroup = 'Android' \\nORDER BY reported_date\"\ndefault_data      <- do.call(mssqlQuery_fn, list(mssql_db, default_qry))\ncurr_result_tbl   <- default_data\ndefault_dashboard <- 'New Dashboard'\n\nchart_update_thresh <- seconds(1)\n\n#Generate Plots for UI\n#---------------------\nshinyServer(function(input, output, session) {\n\n  first_time <- 1\n  update_preview_val   <- 0\n  \n  #Determine Available dashboards\n  available_dashboards <- reactive({invalidateLater(1000*30, session); str_replace(list.files(str_c(getwd(),'/dashboards')), '.RData', '')})\n  \n  #Determine selected dashboard from url\n  selected_dashboard <- reactive({\n    url_query <- parseQueryString(session$clientData$url_search)\n    selected_dashboard <- default_dashboard\n    if (length(url_query) > 0 )\n      if(url_query[[1]] %in% isolate(available_dashboards()))\n        selected_dashboard <- url_query[[1]]\n    selected_dashboard\n  })\n  \n  #Handle dashboard switch event\n  observe({\n    if(input$sel_dashboard != selected_dashboard() & first_time == 0){\n      session$sendCustomMessage(type = \"shiny.go_to_url\", list(url = isolate(input$sel_dashboard)))\n    }\n  })\n  \n  #Handle dashboard delete event\n  observe({\n    if(input$delete_dash_btn > 0){\n      if(isolate(selected_dashboard()) != default_dashboard){\n        file.remove(str_c(getwd(), '/dashboards/', isolate(selected_dashboard()),'.RData')) \n        session$sendCustomMessage(type = \"shiny.go_to_url\", list(url = default_dashboard))\n      }\n    }\n  })\n    \n  #Available dashboards\n  observe({\n    invalidateLater(1000*10, session)#Update once every 30 sec\n    #print('Updating dashboard list')\n    updateSelectInput(session, 'sel_dashboard', choices = available_dashboards(), selected = selected_dashboard())\n    first_time <<-0\n  })\n  \n  \n  #Initialize core data stores\n  widget_counts <- reactiveValues(num_charts = 0, num_textareas = 0)\n  input_queries <- reactiveValues()\n  input_data    <- reactiveValues()\n  last_update   <- reactiveValues()\n  #input_queries[['gItemPlot0']] <- default_query\n  \n#   #Refresh Data\n#   observe({\n#     invalidateLater(1000*10, session)#Update once every 30 sec\n#     isolate({\n#       dashboard_state <- fromJSON(input$gridster_frame)\n#       if(length(dashboard_state) > 0){\n#       for (i in 1:length(dashboard_state)){\n#         widget_id <- dashboard_state[[i]]$id\n#         if(str_detect(widget_id, 'gItemPlot')){\n#           chart_id <- str_replace(widget_id, 'w_','')\n#           if(length(last_update[[chart_id]]) > 0)\n#             if(last_update[[chart_id]] < now() - chart_update_thresh)\n#               print(str_c(chart_id,' last updated ', last_update[[chart_id]], ' is out of date'))\n#           \n#         }\n#       }\n#       }\n#     })\n#   })\n#TODO:\n# - Need to know which db a query belongs to\n# - Finish implementing refresh functionality\n# - Button to refresh all queries\n# - Refresh interval picker\n# - Run refresh / save data on start?\n\n    \n  #Selected Database\n  selected_db <- reactive({if(input$selected_db == 'iHR Impala') return(impala_db) \n                           else if(input$selected_db == 'Sample DB') return(sample_db)\n                           else return(mssql_db)})\n  sqlQuery_fn <- reactive({if(input$selected_db == 'iHR Impala') return(impalaQuery_fn) \n                           else if(input$selected_db == 'Sample DB') return(sampleQuery_fn) \n                           else return(mssqlQuery_fn)})\n  \n  #Save Query Button\n  observe({\n    if(input$save_changes > 0){\n      chart_id                  <- isolate(input$active_chart_id)\n      input_queries[[chart_id]] <- isolate(input$code)\n      input_data[[chart_id]]    <- isolate(do.call(sqlQuery_fn(), list(selected_db(), input$code)))\n      last_update[[chart_id]]   <- now()\n    }\n  }) \n  \n  #Current Results Table\n  curr_result_tbl <- reactive({\n    active_chart_id <- input$active_chart_id\n    if(active_chart_id != ''){\n      if(input$update_preview > update_preview_val){ \n        #If change comes from 'run query'\n        update_preview_val     <<- input$update_preview\n        return(isolate(do.call(sqlQuery_fn(), list(selected_db(), input$code))))\n      }\n      else{ #If change comes from switching active tile\n        return(input_data[[active_chart_id]])\n      }\n    }else{\n      return(data.frame(i = 1))\n    }\n    \n  })\n  \n  #Result Table\n  output$output_tbl <- renderDataTable(curr_result_tbl(), options = list(iDisplayLength = 5))\n  \n  #Code Editor Observer\n  observe({\n    active_chart_id <- input$active_chart_id\n    if(active_chart_id != '')\n      updateAceEditor(session, 'code', value=isolate(input_queries[[active_chart_id]]))\n  })\n  \n  \n  #Add Chart Widget Function\n  chartWidget <- function (chart_id, chart_type, chart_opts){ \n    isolate({\n    charteditor_id <- str_c(chart_id, '_editor')\n    \n    #Query Editor Button\n    edit_qry_btn    <- tags$div(class=\"qry btn\", 'style'=\"display:inline;\", 'data-toggle'=\"modal\", 'data-target'=\"#full-width\", 'chart-id'= chart_id, title = 'Edit Query', icon('pencil-square-o'),'Query')\n    \n    #Chart\n    output[[chart_id]] <- renderGoogleChart({ \n      googleChartObject(\n        data = input_data[[chart_id]], \n        type = input[[charteditor_id]]$chartType, \n        options = input[[charteditor_id]]$options)\n    })\n    \n    #Widget content\n    widget_id   <- str_c('w_', chart_id)\n    widget_html <- paste0(tags$li(\n      class = 'new',\n      id = widget_id, \n      remove_btn, \n      edit_qry_btn, \n      googleChartEditor(charteditor_id, chart_id, chart_type, chart_opts, paste0(icon('pencil-square-o'), ' Chart ')),\n      fluidRow(googleChartOutput(chart_id), style = 'height : 100%;')\n    ))\n    })\n    return(widget_html)\n  }\n  \n  #Chart Initialization Observer\n  observe({ #Take dependence on addChart button \n    if(input$addChart > 0){\n    #Increment num charts\n    widget_counts$num_charts <- isolate(widget_counts$num_charts) + 1\n    num_charts <- isolate(widget_counts$num_charts)  \n    #print(str_c('Num charts: ', num_charts))\n    \n      chart_id                  <- str_c('gItemPlot', num_charts)\n      input_queries[[chart_id]] <- default_qry\n      input_data[[chart_id]]    <- default_data\n      \n      widget_html <- chartWidget(chart_id, 'Table', '{}')\n      dataList <- list(id = 'gridster_frame', html = widget_html)\n      dataList$size_x <- 2\n      dataList$size_y <- 1\n      session$sendCustomMessage(\"shinyGridster.add_widget\", dataList) \n    \n    }\n  })  \n  \n  #Text Area Initialization Observer\n  observe({#Take dependence on addText Button\n    if(input$addText > 0){  \n      widget_counts$num_textareas <- isolate(widget_counts$num_textareas) + 1\n      num_textareas     <- isolate(widget_counts$num_textareas)\n      #print(str_c('Num text areas: ', num_textareas))\n      \n      if(num_textareas > 0){\n        textarea_id     <- str_c('textArea', num_textareas)\n        widget_id       <- str_c('w_', textarea_id)\n        text_area_tmpl  <- tags$div(id = textarea_id, class = \"shinytinymce\", 'Click to edit text.', style = \"resize: none; width: 100%; height: 78%; border-style: none; background: gainsboro;\")\n        widget_html     <- paste0(tags$li(class = 'new', id = widget_id, remove_btn, p('.', style = 'color: transparent'), text_area_tmpl))\n        \n        dataList        <- list(id = 'gridster_frame', html = widget_html)\n        session$sendCustomMessage(\"shinyGridster.add_widget\", dataList)\n      }\n    }\n  })\n\n  \n  #Save dashboard function\n  saveDashBoard <- function(dashboard_title){\n      isolate({     \n        #Initialize/populate dashboard state object\n        dashboard_state <- fromJSON(input$gridster_frame)\n        #print('====Raw Object====') print(dashboard_state)\n        \n        #Save title\n        #dashboard_title_panel <- input$dashboard_title_panel\n        \n        #Save widgets\n        for (i in 1:length(dashboard_state)){\n          widget_id <- dashboard_state[[i]]$id\n          if(str_detect(widget_id, 'gItemPlot')){\n            chart_id                          <- str_replace(widget_id, 'w_','')\n            charteditor_id                    <- str_c(chart_id,'_editor')\n            dashboard_state[[i]]$query        <- input_queries[[chart_id]]\n            dashboard_state[[i]]$data         <- input_data[[chart_id]]\n            dashboard_state[[i]]$last_update  <- last_update[[chart_id]]\n            dashboard_state[[i]]$chart_type   <- input[[charteditor_id]]$chartType\n            dashboard_state[[i]]$chart_opts   <- input[[charteditor_id]]$options\n          }\n          else if(str_detect(widget_id, 'textArea')){\n            textarea_id     <- str_replace(widget_id, 'w_','')\n            dashboard_state[[i]]$content <-  input[[textarea_id]]\n            #print(str_c(textarea_id,' content: ', input[[textarea_id]]))\n          }\n          else{\n            print('Unknown widget')\n          }  \n        }\n        #Save dashboard state\n        #save(list = c('dashboard_state', 'dashboard_title_panel'), file = str_c(getwd(), '/dashboards/', dashboard_title, '.RData'))\n        save(list = c('dashboard_state'), file = str_c(getwd(), '/dashboards/', dashboard_title, '.RData'))\n        #print('====Saved Object====') print(dashboard_state)\n      })\n    }\n  \n  #Save/Save As Observers\n  observe({  \n    if(input$save_as_dash_btn > 0) {\n      dashboard_title <- isolate(input$save_file_name)\n      saveDashBoard(dashboard_title)\n      new_available_dashboards  <- str_replace(list.files(str_c(getwd(),'/dashboards')), '.RData', '')\n      selected_dashboard        <- dashboard_title\n      updateSelectInput(session, 'sel_dashboard', choices = new_available_dashboards, selected = dashboard_title) \n    }\n  })\n  observe({\n    if(input$save_dash_btn > 0){\n      #print(selected_dashboard())\n      saveDashBoard(selected_dashboard())\n    }\n  })\n\n  \n  #Load dash observer\n  observe({\n        #Load data\n        load(file = str_c(getwd(), '/dashboards/', selected_dashboard(), '.RData'))\n        #print('====Loaded Object====')print(dashboard_state)\n        \n        #Load title\n        #data_list <- list(id = 'dashboard_title_panel', content = dashboard_title_panel)\n        #session$sendCustomMessage(type = \"shinyTinyMCE.update\", data_list)\n        \n        #Load widgets\n        for (i in 1:length(dashboard_state)){\n          if(str_detect(dashboard_state[[i]]$id, 'gItemPlot')){\n            widget_counts$num_charts <- isolate(widget_counts$num_charts) + 1\n            num_charts      <- isolate(widget_counts$num_charts)\n            chart_id        <- str_c('gItemPlot', num_charts)\n            widget_id       <- str_c('w_', chart_id)\n            \n            chart_type                <- dashboard_state[[i]]$chart_type\n            chart_opts                <- dashboard_state[[i]]$chart_opts\n            input_queries[[chart_id]] <- dashboard_state[[i]]$query\n            input_data[[chart_id]]    <- dashboard_state[[i]]$data\n            last_update[[chart_id]]   <- dashboard_state[[i]]$last_update\n            widget_html               <- chartWidget(chart_id, chart_type, chart_opts)          \n          }\n          else if(str_detect(dashboard_state[[i]]$id, 'textArea')){\n            widget_counts$num_textareas <- isolate(widget_counts$num_textareas) + 1\n            num_textareas   <- isolate(widget_counts$num_textareas)\n            textarea_id     <- str_c('textArea', num_textareas)\n            widget_id       <- str_c('w_', textarea_id)\n            \n            widget_content  <- tags$div(id = textarea_id, class = \"shinytinymce\", HTML(dashboard_state[[i]]$content), style = \"resize: none; width: 100%; height: 78%; border-style: none; background: gainsboro;\")\n            widget_html     <- paste0(tags$li(class = 'new', id = widget_id, remove_btn, p('.', style = 'color: transparent'), widget_content))     \n          }\n          else{\n            print('Unknown widget')\n          }\n          \n          #Build parameter list for widget\n          dataList <- list(id = 'gridster_frame',\n                           col = dashboard_state[[i]]$row,\n                           row = dashboard_state[[i]]$col,\n                           size_x = dashboard_state[[i]]$size_x,\n                           size_y = dashboard_state[[i]]$size_y,\n                           html = widget_html)\n\n          #Add widget\n          session$sendCustomMessage(type = \"shinyGridster.add_widget\", dataList)\n          \n       }\n\n       #print(str_c('Loaded Charts: ', isolate(widget_counts$num_charts), ' Loaded Textareas: ', isolate(widget_counts$num_textareas)))\n\n  })\n  \n  #Render debugging outputs\n  output$last_update_list <- renderPrint({reactiveValuesToList(last_update)})\n  #output$active_chart_id <- renderText({input$active_chart_id})\n  #output$tinymce_test   <- renderText({input$dashboard_title_panel})\n  #output$gridster_state  <- renderPrint({fromJSON(input$gridster_frame)})\n  #output$gridster_test <- renderPrint({fromJSON(input$gridster_state)})\n  \n})\n\n\n\n",
    "created" : 1400091297436.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "603885336",
    "id" : "DD689A9E",
    "lastKnownWriteTime" : 1396214968,
    "path" : "~/Desktop/dev_software/shiny-dashboards/dashboards/gridster_dash/server.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}